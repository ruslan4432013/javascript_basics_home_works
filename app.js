'use strict';
/* Задание 1.Объясните почему код даёт именно такие результаты?*/

//пример 1
let a = 1, b = 1, c, d;
c = ++a;
alert(c); // ответ: 2

/* Объяснение: в данном примере было объявлено 4 переменных, переменной "с" присваивается значение 2 т.к изначально присваивается переменная 
"a" с инкрементом префиксной формы, который увеличивает число на 1. Получаем: c = ++a --> ++a = 1 --> c = a = 2 */

//пример 2
d = b++;
alert(d++); //ответ: 1
//alert(d) // ответ: 2 (доказательство)

/* Объяснение: При постфиксной форме идет обратный порядок, вначале переменной d присваивается значение b, и только потом b увеличивается на 1
в данном примере d присвоилось значение 1, и в следующем вызове функции "alert(d++)" вначале выведется значение переменной "d", и после этого
значение переменной "d" увеличится на 1*/

//пример 3
c = 2 + ++a;
alert(c); //ответ: 5

/* Объяснение: Получается 5, т.к в первом примере мы использовали инкремент, который увеличивает значение переменной "a" на 1, и на момент
выполнения 3-го примера a = 2, при повторном использовании инкремента префиксной формы значение "a" увеличилось еще на 1, итого получилось, 
переменной "a" присвоилось значение 3 и только потом выполнилось выражение  */


//пример 4
d = 2 + b++;
alert(d); //ответ: 4
alert(a); //3
alert(b); //3

/* Объяснение: На моменты выполнения 4-го примера переменная b имела значение 2, т.к используется выражение постфиксной формы, вначале вычисляется
выражение, и только потом значение b увеличивается на 1. Переменной a при выполнении 3-го примера присвоилось значение 3, и значение переменной
b увеличилось на 1 после выполнения выражения "d = 2 + b++" */

/* Задание 2.Чему будут равны переменные x и a в примере ниже? Написать почему так произошло (описать последовательность действий)*/

a = 2; // убрал let т.к переменная "a" уже была объявлена выше
let x = 1 + (a *= 2);
alert(`Ответ - ${a} (к заданию 2)`); //Ответ: 4
alert(`Ответ - ${x} (к заданию 2)`); //Ответ: 5

/* Объяснение: "(a *= 2)" в этом выражении вначале значение переменной a умножилось на 2, "let x = 1 + (a *= 2)" - потом переменной x присвоился
результат выполнения выражения"1 + (a *= 2) --> 1 + 4 = 5*/

/* Задание 3. Объявить две переменные a и b и задать им целочисленные произвольные начальные значения.
Затем написать скрипт, который работает по следующему принципу:
- если a и b положительные, вывести их разность (ноль можно считать положительным числом);
- если а и b отрицательные, вывести их произведение;
- * (этот пункт по сложнее, делайте по желанию) если а и b разных знаков, вывести их сумму;*/

a = -1;
b = 2;

if (a >= 0 && b >= 0) {
    alert(`${b - a} - Разность (если оба числа положительные)`);
} else if (a < 0 && b < 0) {
    alert(`${b * a} - Произведения (если оба числа отризательные)`)
} else {
    alert(`${a + b} - Сумма (если оба числа разных знаков)`)
}

/* Задание 4. Реализовать основные 4 арифметические операции (+, -, /, *) в виде функций с двумя
параметрами. Т.е. например, функция для сложения должна принимать два числа, складывать их
и возвращать результат.
Обязательно использовать оператор return.*/

/**
 * Функция, складывающая 2 числа
 * @param {number} a Первое число
 * @param {number} b Второе число
 * @returns {number} Произведение
 */
function sum(a, b) {
    return a + b
}


function diff(a, b) {
    return a - b
}


function division(a, b) {
    return a / b
}


function mul(a, b) {
    return a * b
}

// Проверка функций
alert(`Первое значение = 5, второе значение = 2, \n"${sum(5, 2)}" - сумма \n"${diff(5, 2)}" - разность \n"${division(5, 2)}" - деление \n"${mul(5, 2)}" - произведение`)

/* Задание 5. Реализовать функцию с тремя параметрами: function mathOperation(arg1, arg2, operation),
где arg1, arg2 – значения аргументов, operation – строка с названием операции. В зависимости от
переданного значения операции (использовать switch) выполнить одну из арифметических
операций
(использовать функции из задания 4) и вернуть полученное значение.
*/

function mathOperation(arg1, arg2, operation) {
    switch (operation) {
        case ('+'):
            return sum(arg1, arg2);
        case ('-'):
            return diff(arg1, arg2);
        case ('/'):
            return division(arg1, arg2);
        case ('*'):
            return mul(arg1, arg2);
        default:
            return 'Не корректное значение'

    }
}

alert(`Результат выполнения функции mathOperation(15, 2, "-"): \n${mathOperation(15, 2, "-")}`)

/*6**. (Это задание не является частью курса, можете его не делать, оно для тех кому мало
обычных заданий, требует времени и возможно гугления, делайте по желанию.)
Программа должна спросить у пользователя число, это будет количество денег, которое он хочет
положить на счет в банке. Затем программа должна выдать примерно такое сообщение:
"Ваша сумма в 101 рубль успешно зачислена." - в случае если пользователь ввел 101.
"Ваша сумма в 10020 рублей успешно зачислена." - в случае если пользователь ввел 10020.
"Ваша сумма в 120104 рубля успешно зачислена." - в случае если пользователь ввел 120104.
То есть ваша задача выводить слово «рубль» в правильном падеже, в зависимости от введенного
числа
*/

function your_money(rub) {
    let num = Number(rub);
    if (Boolean(num) == true) {
        let remainder = num % 10;
        if (num == 0) {
            return `Ваша сумма в ${num} рублей успешно зачислена`
        } else if (remainder == 0 || remainder >= 5) {
            return `Ваша сумма в ${num} рублей успешно зачислена`
        } else if (num >= 11 && num <= 19) {
            return `Ваша сумма в ${num} рублей успешно зачислена+`
        } else if (remainder == 1) {
            return `Ваша сумма в ${num} рубль успешно зачислена`
        } else {
            return `Ваша сумма в ${num} рубля успешно зачислена`
        }
    } else {
        return 'Введены некорректные данные'
    }
}

//Проверка работы функции
let user_answer = prompt('Введите, сколько денег вы хотете зачислить')
alert(your_money(user_answer))
alert(`${your_money(101)} \n${your_money(10020)} \n${your_money(120104)}`)